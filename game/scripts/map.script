--[[
Этот файл — часть Darkbox.

Darkbox — свободная программа: вы можете перераспространять ее и/или
изменять ее на условиях Стандартной общественной лицензии GNU в том
виде, в каком она была опубликована Фондом свободного программного
обеспечения; либо версии 3 лицензии, либо (по вашему выбору) любой
более поздней версии.

Darkbox распространяется в надежде, что она будет полезной, но БЕЗО
ВСЯКИХ ГАРАНТИЙ; даже без неявной гарантии ТОВАРНОГО ВИДА или
ПРИГОДНОСТИ ДЛЯ ОПРЕДЕЛЕННЫХ ЦЕЛЕЙ. Подробнее см. в Стандартной
общественной лицензии GNU.

Вы должны были получить копию Стандартной общественной лицензии GNU
вместе с этой программой. Если это не так, см.
<https://www.gnu.org/licenses/>.
]]

local ID = {
	ARROW = hash("/arrow"),
	PAYPHONE = hash("/payphone")
}

local URL = {
	MCTL = msg.url("game:/player#mission")
}

local MSG = {
	LOAD_MAP = hash("load_map"),
	ADD = hash("add"),
	TOGGLE = hash("toggle"),
}

local FACTORY = {
	PAYPHONE = msg.url("game:/factory#payphone")
}

local PAYPHONES = {}

local function add_object(obj)
	local TYPE = obj.type
	if TYPE == "payphone" then
		PAYPHONES[#PAYPHONES+1] = collectionfactory.create(FACTORY.PAYPHONE, obj.position)
		go.animate(PAYPHONES[#PAYPHONES][ID.ARROW], "position.y", go.PLAYBACK_LOOP_PINGPONG, -15, go.EASING_INOUTSINE, 2)
	else
		error("unknown type: " .. TYPE, 2)
	end
end

local function load_map(name)
	print("loading map: " .. name)

	-- 1. загрузка и установка объектов
	do
		local objects = {}
		
		local payphone = function (tx, ty, sm)
			return {
				type = "payphone",
				position = vmath.vector3(128*tx - 64, 128*ty - 64, 0.9),
				starts_mission = sm,
			}
		end
		
		if name == "metacity" then
			objects.payphones = {
				payphone(7, 3, true),
				payphone(8, 3, true),
				payphone(9, 3, true),
				payphone(10, 3, true),
			}
		else
			print("no such map: " .. name)
			msg.post("@system:", "exit", {code = 1})
		end

		for key, list in pairs(objects) do
			for id, obj in ipairs(list) do
				add_object(obj)

				-- if obj.starts_mission == true then
				-- 	mphones[#mphones+1] = id
				-- end
			end
		end
	end collectgarbage()

	-- 2. сбор нужных данных об объектах и их отправка
	do
		-- ид телефонов
		local p_ids = {}
		
		----------------------------------------------------------------
		-- 2.1. сбор нужных данных
		
		for n, payphone in ipairs(PAYPHONES) do
			p_ids[#p_ids+1] = payphone[ID.PAYPHONE]
		end

		----------------------------------------------------------------
		-- 2.2. отправка данных

		msg.post(URL.MCTL, "set_payphones", p_ids)
	end collectgarbage()

	print("finished!")
end

function init(self)
	load_map("metacity")
end

function on_message(self, message_id, message)
	if message_id == MSG.ADD then
		add_object(message)
	elseif message_id == MSG.TOGGLE then
		for n, pair in ipairs(message) do
			local TYPE, OBJ_ID, MODE = pair[1], pair[2], pair[3]

			if MODE == true then
				MODE = "enable"
			elseif MODE == false then
				MODE = "disable"
			else
				error(string.format("pair %d: illegal mode", n), 2)
			end

			local err = function ()
				error(string.format("unable to fetch object of type '%s' with id %d (in pair %d)", TYPE, OBJ_ID, n), 2)
			end

			if TYPE == "payphone" then
				msg.post(assert(PAYPHONES[OBJ_ID], err)[ID.ARROW], MODE)
			else
				error(string.format("pair %d: illegal object type '%s'", n, TYPE), 2)
			end
		end
	elseif message_id == MSG.LOAD_MAP then
		load_map(assert(message.name, error("expected field `name`", 2)))
	end
end