--[[
Этот файл — часть Darkbox.

Darkbox — свободная программа: вы можете перераспространять ее и/или
изменять ее на условиях Стандартной общественной лицензии GNU в том
виде, в каком она была опубликована Фондом свободного программного
обеспечения; либо версии 3 лицензии, либо (по вашему выбору) любой
более поздней версии.

Darkbox распространяется в надежде, что она будет полезной, но БЕЗО
ВСЯКИХ ГАРАНТИЙ; даже без неявной гарантии ТОВАРНОГО ВИДА или
ПРИГОДНОСТИ ДЛЯ ОПРЕДЕЛЕННЫХ ЦЕЛЕЙ. Подробнее см. в Стандартной
общественной лицензии GNU.

Вы должны были получить копию Стандартной общественной лицензии GNU
вместе с этой программой. Если это не так, см.
<https://www.gnu.org/licenses/>.
]]

local URL = {
	MCTL = msg.url("game:/player#mission"),
}

local MSG = {
	LOAD_MAP = hash("load_map"),
	SET_PAYPHONES = hash("set_payphones")
}

local FACTORY = {
	PAYPHONE = msg.url("game:/factory#payphone"),
	TARGET_PTR = msg.url("game:/factory#target_ptr")
}

local function load_map(name)
	print("loading map: " .. name)

	do
		local objects = {}
		
		local payphones = {}

		-- local err = function (errmsg)
		-- 	print("FATAL: " .. errmsg)
		-- 	msg.post("@system:", "exit", {code = 1})
		-- end
		
		local payphone = function (tx, ty)
			return {
				type = "payphone",
				position = vmath.vector3(128*tx - 64, 128*ty - 64, 1),
			}
		end
		
		if name == "metacity" then
			objects.payphones = {
				payphone(7, 3),
				payphone(8, 3),
				payphone(9, 3),
				payphone(10, 3),
			}
		else
			print("FATAL: no such map: " .. name)
			msg.post("@system:", "exit", {code = 1})
		end

		for key, list in pairs(objects) do
			for id, obj in ipairs(list) do
				local TYPE = obj.type
				local POS = obj.position
				
				if TYPE == "payphone" then
					payphones[#payphones+1] = collectionfactory.create(FACTORY.PAYPHONE, POS)
				elseif TYPE == "target_ptr" then
					collectionfactory.create(FACTORY.TARGET_PTR, POS)
				end
			end
		end

		msg.post(URL.MCTL, MSG.SET_PAYPHONES, payphones)
	end collectgarbage()

	print("finished loading map")
end

function init(self)
	load_map("metacity")
end

function on_message(self, message_id, message)
	if message_id == MSG.LOAD_MAP then
		load_map(assert(message.name, error("expected field `name`", 2)))
	end
end